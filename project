#!/bin/sh

##
# this is currently a simple wrapper for our common docker commands
# i know this is not the best code, but currently it works ;-)
#
# AUTHOR: Robert Eichholtz <info@eichie.de>
##

VERSION="0.1.1-dev"
VERBOSE=false
ARGS_COUNT="$#"
USERID=$(id -u $USER)
USERNAME=$(whoami)
ETC_HOSTS=/etc/hosts
ENV_FILE=./.env
SHARED_FOLDER=./shared


load_env_source () {
    # fetch data from .env file
    if [ -f $ENV_FILE ];then
        . $ENV_FILE
    fi
}

load_env_source;

# install dependencies if not exists
if [ ! -f `which mysql` ] ; then
    sudo apt-get install mysql-client-5.7
fi

show_help () {
    echo "NAME:
    $(basename "$0") docker env build program

VERSION:
    ${VERSION}

USAGE:
    [-h|--help] [-v|--verbose] [arguments]

ARGUMENTS:
    start         start the docker
    stop          down the docker
    status        print current docker container status
    build         build the docker
    php           interactive shell for php
    build         interactive shell for nginx
    attach        attach to a container with second arg (i.e: db|php|nginx|elk)
    mysql         go into mysql shell
    npm           exec npm
    bower         exec bower
    grunt         exec grunt
    install       install project with second arg (i.e: yourdomain.dev)
    cleanup       remove project docker container and images
    update-hosts  update hosts using sudo with second arg (i.e: yourdomain.dev)
    import-sql    import sql file into db with second arg (i.e: mybackup.sql)
    export-sql    export db into sql file with second arg (i.e: mybackup.sql)
    network       print the docker ips

OPTIONS:
    -h|--help     show this help text
    -v|--verbose  show more verbose output"
    exit 0
}

enable_verbose () {
    VERBOSE=true;
}

start_docker () {
    docker-compose up -d
}

stop_docker () {
    docker-compose down
}

build_docker () {
    docker-compose build
}

attach_docker () {
    docker-compose exec "${1}" bash
}

status_docker () {
    docker-compose ps
}

install_docker () {

    if [ $(id -u) -eq 0 ]; then
        echo "Do NOT run this script as root!"
        exit 0;
    fi

    if [ -f ./.env ]; then
        echo "Project already installed. Please delete the .env file to install"
        exit 0;
    fi

    NGINX_DOMAIN=${1}

    cp -f ./.env.dist ./.env
    sed -i s/__USERID__/${USERID}/g ./.env
    sed -i s/__USERNAME__/${USERNAME}/g ./.env
    sed -i s/__DOMAIN__/${NGINX_DOMAIN}/g ./.env

    build_docker;
    start_docker;
    import_mysql;
    npm_docker cmd install;
    bower_docker cmd install;
    grunt_docker cmd build;
    update_hosts $NGINX_DOMAIN;
}

update_hosts ()  {
    NGINX_DOMAIN=${1}
    NGINX_IP=`docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q) | grep nginx | awk '{print $3;}'`

    if [ -n "$(grep ${NGINX_DOMAIN} /etc/hosts)" ]
    then
        echo "${NGINX_DOMAIN} was found in your ${ETC_HOSTS}; Removing now";
        sudo sed -i".bak" "/$NGINX_DOMAIN/d" $ETC_HOSTS;
    fi

    echo "${NGINX_IP} ${NGINX_DOMAIN} was added to your ${ETC_HOSTS}"
    sudo -- sh -c -e "echo '${NGINX_IP}\t${NGINX_DOMAIN}' >> ${ETC_HOSTS}";
}

mysql_docker () {
    docker-compose exec db mysql -uroot -p"root"
}

network_docker () {
    docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q)
}

cmd_php_docker () {
    shift 1
    echo "docker-compose exec --user ${USERNAME} php ${@}";
    docker-compose exec --user ${USERNAME} php ${@}
}

cmd_nginx_docker () {
    shift 1
    docker-compose exec --user ${USERNAME} nginx ${@}
}

cmd_node_docker () {
    docker run -u ${USERID} -it --rm -v $(pwd)/www:/app -w /app digitallyseamless/nodejs-bower-grunt
}

npm_docker () {
    shift 1
    docker run -u ${USERID} -it --rm -v $(pwd)/www:/app -w /app digitallyseamless/nodejs-bower-grunt npm ${@}
}

bower_docker () {
    shift 1
    docker run -u ${USERID} -it --rm -v $(pwd)/www:/app -w /app digitallyseamless/nodejs-bower-grunt bower ${@}
}

grunt_docker () {
    shift 1
    docker run -u ${USERID} -it --rm -v $(pwd)/www:/app -w /app digitallyseamless/nodejs-bower-grunt grunt ${@}
}

import_mysql () {
    load_env_source;
    DB_IP=`docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q) | grep db | awk '{print $3;}'`
    mkdir -p ${SHARED_FOLDER}
    mysql -h ${DB_IP} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} < ${SHARED_FOLDER}/latest.sql
}

export_mysql () {
    load_env_source;
    DB_IP=`docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q) | grep db | awk '{print $3;}'`
    mkdir -p ${SHARED_FOLDER}
    mv ${SHARED_FOLDER}/latest.sql ${SHARED_FOLDER}/$(date -d "today" +"%Y%m%d%H%M").sql
    mysqldump --opt -Q -h ${DB_IP} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} --databases ${MYSQL_DATABASE} > ${SHARED_FOLDER}/latest.sql
}

docker_uninstall() {
    docker-compose down
    docker rm $(docker ps -aq)
    docker rmi $(docker images -q)
}

cleanup_docker () {

    read -p "Are you sure? Project docker container and images will be deleted (y|N):" REPLY

    case $REPLY in
      y|Y) docker_uninstall ;;
      *) echo "OK, Nothing happens" ;;
    esac
}

show_possible_args () {
    if [ ! "$ARGS_COUNT" -eq 0 ]; then
        echo "Only one of the following args are available (start|stop|status|build|attach|php|nginx|install|mysql|cleanup|network|import-sql)"
    else
        show_help;
    fi
}

process_args () {
    case "$1" in
        start ) start_docker; shift ;;
        stop  ) stop_docker; shift ;;
        status ) status_docker; shift ;;
        build ) build_docker; shift ;;
        php ) cmd_php_docker "$@"; shift ;;
        nginx ) cmd_nginx_docker "$@"; shift ;;
        node ) cmd_node_docker; shift ;;
        npm ) npm_docker "$@"; shift ;;
        bower ) bower_docker "$@"; shift ;;
        grunt ) grunt_docker "$@"; shift ;;
        install ) install_docker "$2"; shift ;;
        update-hosts ) update_hosts "$2"; shift ;;
        attach ) attach_docker "$2"; shift ;;
        import-sql ) import_mysql; shift ;;
        export-sql ) export_mysql; shift ;;
        mysql ) mysql_docker; shift ;;
        cleanup ) cleanup_docker; shift ;;
        network ) network_docker; shift ;;
        * ) show_possible_args; shift ;;
    esac
}

case "$1" in
    -v | --verbose ) enable_verbose; shift ;;
    -h | --help ) show_help; shift ;;
    -- ) show_help; break ;;
esac

process_args "$@"